

library(lubridate)
library(tidyverse)
library(highcharter)
library(xts)
library(TTR)
library(zoo)
library(quantmod)
library(scales)
library(jsonlite)
library(plumber)
library(RMariaDB)


plot_auth <- function(endpoint, time_limit = 15) {
  # Save current time to compare against endpoint time value
  current_time <- Sys.time()
  
  # Try to decrypt endpoint and extract user id
  tryCatch({
    # Convert time
    endpoint_time <- as.POSIXct(endpoint)
    # Calculate time difference
    time_diff <- difftime(current_time, endpoint_time, units = "secs")
    
    # If more than 5 seconds have passed since the request was generated, then
    # error
    if (time_diff > time_limit) {
      "Unauthorized"
    } else {
      endpoint
    }
  },
  error = function(e) "Unauthorized"
  )
}

calculate_stocks <- function(data, db, Ticker_name, start_date, end_date){
  
  range_year <- (str_extract(start_date, pattern = "[0-9]+") %>% as.numeric()):(str_extract(end_date, pattern = "[0-9]+") %>% as.numeric())
  
  # Defined Function
  auto_select_extra <- function(x,y){
    x %>% 
      mutate(Date = ymd(Date),
             year = year(Date)) %>% 
      filter(Fields %in% y,
             year %in% range_year) %>% 
      select(Fields, Ticker, Date, Value)
  }
  
  rename_variable <- function(data, data_ref){
    
    if (is.na(data_ref$Z)) {
      data <- data %>% 
        rename(
          X = data_ref$X, 
          Y = data_ref$Y 
        )
    } else {
      data <- data %>% 
        rename(
          X = data_ref$X, 
          Y = data_ref$Y, 
          Z = data_ref$Z 
        )
    }
    
    return(data)
  }
  
  # Get the data source
  df_process <- data %>% 
    mutate_at(vars(Data, Period), tolower) %>% 
    mutate(
      Period = tolower(Period),
      
      X = case_when(X == "Account Payables" ~ "Account Payable",
                    TRUE ~ X),
      Y = case_when(Y == "Account Payables" ~ "Account Payable",
                    TRUE ~ Y),
      Z = case_when(Z == "Account Payables" ~ "Account Payable",
                    TRUE ~ Z),
      
      X = ifelse(X == "NA", NA, X),
      Y = ifelse(Y == "NA", NA, Y),
      Z = ifelse(Z == "NA", NA, Z),
      
      data_source_x = case_when(
        Type == "Valuation" & ( X %in% c("Enterprise Value", "Market Cap") ) ~ "lv3_px_stocks",
        Type == "Valuation" & (!( X %in% c("Enterprise Value", "Market Cap") )) ~ "lv3_fs_stocks_annual",
        TRUE ~ paste("lv3_fs", Data, Period, sep = "_")
      ),
      data_source_y = case_when(
        Type == "Valuation" & ( Y %in% c("Enterprise Value", "Market Cap") ) ~ "lv3_px_stocks",
        Type == "Valuation" & (!( Y %in% c("Enterprise Value", "Market Cap") )) ~ "lv3_fs_stocks_annual",
        TRUE ~ paste("lv3_fs", Data, Period, sep = "_")
      ),
      data_source_z = case_when(
        is.na(Z) ~ "NA",
        Type == "Valuation" & ( Z %in% c("Enterprise Value", "Market Cap") ) ~ "lv3_px_stocks",
        Type == "Valuation" & (!( Z %in% c("Enterprise Value", "Market Cap") )) ~ "lv3_fs_stocks_annual",
        TRUE ~ paste("lv3_fs", Data, Period, sep = "_")
      ) %>% 
        ifelse(. == "NA", NA, .)
    )
  
  # print(df_process)
  
  # Collect data from database
  ## If column Z is empty
  if (is.na(df_process$Z)) {
    df_x <- df_collect <- tbl(db, df_process$data_source_x) %>% 
      filter(Ticker == Ticker_name) %>% 
      collect() %>% 
      auto_select_extra(df_process$X) %>% 
      filter(Date >= ymd(start_date), 
             Date <= ymd(end_date)
      )
    
    df_y <- tbl(db, df_process$data_source_y) %>% 
      filter(Ticker == Ticker_name) %>% 
      collect() %>% 
      auto_select_extra(df_process$Y) %>% 
      filter(Date >= ymd(start_date), 
             Date <= ymd(end_date)
      )
    
    # Is the period Annual
    if (df_process$Period == "annual") {
      df_x <- df_x %>% 
        mutate(year = year(Date)) 
      
      df_y <- df_y %>% 
        mutate(year = year(Date)) 
      
      df_collect <- df_x %>% 
        bind_rows(df_y) %>%   
        mutate(Period = "Annual") %>% 
        select(Fields, Period, Date, year, Value) %>% 
        group_by(Fields, year) %>% 
        arrange(desc(Date)) %>% 
        slice(1) %>% 
        ungroup() %>% 
        select(-Date) %>% 
        pivot_wider(names_from = "Fields", values_from = "Value") 
      # mutate_if(.predicate = anyNA, .funs = function(x){if_else(is.na(x), 0, as.numeric(x))})
      
    } else {
      df_x <- df_x %>% 
        mutate(quarter = quarter(Date),
               year = year(Date)) 
      
      df_y <- df_y %>% 
        mutate(quarter = quarter(Date),
               year = year(Date)) 
      
      df_collect <- df_x %>% 
        bind_rows(df_y) %>% 
        mutate(Period = "Quarter") %>% 
        select(Fields, Period, Date, year, quarter, Value) %>% 
        group_by(Fields, year, quarter) %>% 
        arrange(desc(Date)) %>% 
        slice(1) %>% 
        ungroup() %>% 
        select(-Date) %>% 
        pivot_wider(names_from = "Fields", values_from = "Value")
      # mutate_if(.predicate = anyNA, .funs = function(x){if_else(is.na(x), 0, as.numeric(x))})
    }
  } 
  
  ## If column Z is not empty
  else {
    df_x <- df_collect <- tbl(db, df_process$data_source_x) %>% 
      filter(Ticker == Ticker_name) %>% 
      collect() %>% 
      auto_select_extra(df_process$X) %>% 
      filter(Date >= ymd(start_date), 
             Date <= ymd(end_date)
      )
    
    df_y <- tbl(db, df_process$data_source_y) %>% 
      filter(Ticker == Ticker_name) %>% 
      collect() %>% 
      auto_select_extra(df_process$Y) %>% 
      filter(Date >= ymd(start_date), 
             Date <= ymd(end_date)
      )
    
    df_z <- tbl(db, df_process$data_source_z) %>% 
      filter(Ticker == Ticker_name) %>% 
      collect() %>% 
      auto_select_extra(df_process$Z) %>% 
      filter(Date >= ymd(start_date), 
             Date <= ymd(end_date)
      )
    
    # Is the period Annual
    if (df_process$Period == "annual") {
      df_x <- df_x %>% 
        mutate(year = year(Date)) 
      
      df_y <- df_y %>% 
        mutate(year = year(Date)) 
      
      df_z <- df_z %>% 
        mutate(year = year(Date)) 
      
      df_collect <- df_x %>% 
        bind_rows(df_y, df_z) %>%   
        mutate(Period = "Annual") %>% 
        select(Fields, Period, Date, year, Value) %>% 
        group_by(Fields, year) %>% 
        arrange(desc(Date)) %>% 
        slice(1) %>% 
        ungroup() %>% 
        select(-Date) %>% 
        pivot_wider(names_from = "Fields", values_from = "Value") 
      # mutate_if(.predicate = anyNA, .funs = function(x){if_else(is.na(x), 0, as.numeric(x))})
    } else {
      df_x <- df_x %>% 
        mutate(quarter = quarter(Date),
               year = year(Date)) 
      
      df_y <- df_y %>% 
        mutate(quarter = quarter(Date),
               year = year(Date)) 
      
      df_z <- df_z %>% 
        mutate(quarter = quarter(Date),
               year = year(Date))
      
      df_collect <- df_x %>% 
        bind_rows(df_y, df_z) %>% 
        mutate(Period = "Quarter") %>% 
        select(Fields, Period, Date, year, quarter, Value) %>% 
        group_by(Fields, year, quarter) %>% 
        arrange(desc(Date)) %>% 
        slice(1) %>% 
        ungroup() %>% 
        select(-Date) %>% 
        pivot_wider(names_from = "Fields", values_from = "Value") 
      # mutate_if(.predicate = anyNA, .funs = function(x){if_else(is.na(x), 0, as.numeric(x))})
    } 
  }
  
  # print(df_collect)
  # Calculate Formula
  if (is.na(df_process$Z)) {
    output <- df_collect %>% 
      rename_variable(data_ref = df_process) %>% 
      mutate( new_col = eval(parse(text = df_process$Formula)) )  %>% 
      select(-c(X,Y)) %>% 
      pivot_longer(cols = new_col, names_to =  "Fields", values_to = "Value") %>% 
      mutate(Fields = df_process$Fields) %>% 
      arrange(year)
  } else {
    output <- df_collect %>% 
      rename_variable(data_ref = df_process) %>% 
      mutate( new_col = eval(parse(text = df_process$Formula)) )  %>% 
      select(-c(X,Y,Z)) %>% 
      pivot_longer(cols = new_col, names_to =  "Fields", values_to = "Value") %>% 
      mutate(
        Fields = df_process$Fields
      ) %>% 
      arrange(year)
  }
  
  return(output)
}


if (is.null(plumber:::.globals$serializers[["custom_jarvis"]])) {
  plumber::addSerializer("custom_jarvis", function() {
    function(val, req, res, errorHandler){
      tryCatch({
        data_req <- (req$postBody)
        container <- paste0("#", fromJSON(data_req)$id)
        json <- jsonlite::toJSON(val, force = TRUE, auto_unbox = TRUE)
        
        json_out <- sprintf("$(function(){\n\t$('%s').highcharts(\n%s\n);\n});", container, json)
        res$setHeader("Content-Type", "application/json")
        res$body <- json_out
        
        return(res$toResponse())
      }, error = function(e) {
        errorHandler(req, res, e)
      })
    }
  })
}

#* @apiTitle Plumber Example API

#* Echo back the input
#* @param input input json
#*  @serializer unboxedJSON
#* @post /echo
function(req, input){
  
  fromJSON(req$postBody, flatten = FALSE)
  
}

#* Stock Price Chart
#* @param ticker Ticker Name
#* @param currency IDR or USD
#* @param type Chart Type (line, candlestick, area)
#* @param id Container
#* @serializer custom_jarvis
#* @post /stockprice
function(ticker, currency, type, id, res){
  
  # Authenticate that request came from /status
  timelimit <- plot_auth(ticker)
  
  # Return unauthorized error if cust_id is "Unauthorized"
  if (timelimit == "Unauthorized") {
    res$status <- 401
    stop("Unauthorized request")
  }
  
  
  # Connection SQL
  
  conn <- dbConnect(
    MariaDB(),
    user = "jarvisalgoritma",
    password = "Jarvis@2020",
    dbname = "jarvis-algoritma",
    host = "api.jarvisasset.com"
  )

  dbListTables(conn)
  
  
  # parameterize
  
  get_ticker <- ticker
  
  
  pxstocks_data <- readRDS("data/pxstocks_data.RDS")
  
  # get data
  
  ma_ordo <- 30
  currency <- currency # IDR or USD
  chart_type <- type # candlestick, line, column, area
  
  
  usd_idr <- tbl(conn, "lv3_px_currency") %>%
    filter(Ticker %in% currency) %>%
    select(Date, Value) %>%
    collect() %>%
    mutate_at("Date", ymd)
  
  
  date_flags <- ymd(c("2017-04-17", "2019-08-17"))
  title_flags <- c("#E1", "#E2")
  text_flags <- c("An interesting event #1", "An interesting event #2")
  
  
  flags <- data_frame(
    date = date_flags,
    title = title_flags,
    text = text_flags
  )
  
  # data aggregation
  
  pxstocks_agg <- pxstocks_data %>%
    select(-ID_Unique) %>%
    mutate_at("Date", ymd) %>%
    left_join(usd_idr, by = "Date") %>%
    mutate(Value.x = case_when(currency == "USD" ~ Value.x/Value.y,
                               TRUE ~ Value.x)) %>%
    select(-Value.y) %>%
    pivot_wider(names_from = Fields, values_from = Value.x) %>%
    rename(
      PX.High = `PX High`,
      PX.Close = `PX Last`,
      PX.Open = `PX Open`,
      PX.Low = `PX Low`
    ) %>%
    filter(complete.cases(.)) %>%
    mutate(
      MA = rollapplyr(PX.Close, ma_ordo, mean, na.rm = TRUE, fill = NA),
      STD = rollapplyr(PX.Close, ma_ordo, sd, na.rm = TRUE, fill = NA),
      Upper_Boll = MA + 2*STD,
      Lower_Boll = MA - 2*STD,
      RSI = RSI(PX.Close)
    )
  
  # data viz
  
  pxstocks_datviz <- xts(x = pxstocks_agg %>% select(PX.Open, PX.High, PX.Low,
                                                     PX.Close, Volume, MA, RSI,
                                                     Upper_Boll, Lower_Boll),
                         order.by = pxstocks_agg$Date)
  
  
  # highcharts
  
  hc <- highchart(type = "stock") %>%
    hc_yAxis_multiples(
      create_yaxis(3, heights = c(3,1,1), turnopposite = TRUE)
    ) %>%
    hc_add_series(pxstocks_datviz, yAxis = 0, name = get_ticker, id = "stock", type = chart_type) %>%
    hc_add_series(pxstocks_datviz$MA,  yAxis = 0, name = "MA") %>%
    hc_add_series(pxstocks_datviz$Upper_Boll,  yAxis = 0, name = "upper") %>%
    hc_add_series(pxstocks_datviz$Lower_Boll,  yAxis = 0, name = "lower") %>%
    hc_add_series(flags, hcaes(x = date),
                  type = "flags", onSeries = "stock") %>%
    hc_add_series(pxstocks_datviz$Volume, yAxis = 1, name = "Volume", type = "column") %>%
    hc_add_series(pxstocks_datviz$RSI, yAxis = 2, name = "RSI") %>%
    hc_tooltip(split = FALSE, shared = TRUE) %>%
    hc_plotOptions(
      series = list(
        fillOpacity = 0.1
      )
    ) %>%
    hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
             margin = 20, align = "left",
             style = list(color = "#ffc000", useHTML = TRUE)) %>%
    hc_subtitle(text = "And this is a subtitle with more information",
                align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>%
    hc_add_theme(hc_theme_monokai())

    temp <- hc$x$hc_opts
  
    return(temp)
  
}


#* Growth
#* @param grouping
#* @param type
#* @param field
#* @json
#* @post /growth
function(grouping, type, field, req){
  
  
  stock_absolute_table <- readRDS(file = "data/stock_table.RDS")
  FS.Sector.Growth.Q <- readRDS( file = "data/sector_q.RDS")
  FS.Sector.Growth.A <- readRDS(file = "data/sector_a.RDS")
  stock_absolute_long <- readRDS( file = "data/stock_abs.RDS")
  stock_class_long <- readRDS(file = "data/stock_class.RDS")
  
    temp_out <- FS.Sector.Growth.A %>% 
      select(-ID_Unique) %>% 
      filter(year(Date) == "2018") %>% 
      arrange(desc(Value)) %>% 
      group_by(Grouping, Fields, Growth) %>% 
      mutate(
        `Ranking Grouping` = dense_rank(desc(Value))
      ) %>% 
      ungroup() %>%
      arrange(Fields, `Ranking Grouping`) %>%  
      filter(Grouping == grouping) %>% 
      rename(!! grouping := Ticker) %>% 
      select(-Value) %>% 
      left_join(
        select(stock_absolute_long, Ticker, !! grouping, Fields, Date, Growth, Value)
      ) %>% 
      group_by(.dots = grouping, Fields, Growth) %>%
      mutate(
        `Ranking Stock` = dense_rank(desc(Value))
      ) %>%
      ungroup() %>%
      # select(-Value) %>% 
      left_join(
        select(stock_class_long, Ticker, !! grouping, Fields, Date, Growth, Class)
      ) %>% 
      mutate(
        Scoring = case_when(
          Class == "Turning Profit" ~ 1000,
          Class == "Low Base" ~ 2000,
          Class == "Normal" ~ 3000,
          Class == "Smaller Loss" ~ 4000,
          Class == "Bigger Loss" ~ 5000,
          Class == "Turning Loss" ~ 6000
        )
      ) %>% 
      group_by(
        Class, Growth
      ) %>% 
      mutate(
        `Adj Rank` = dense_rank(desc(Value))
      ) %>% 
      ungroup() %>% 
      mutate(
        `Ranking Stock` = case_when(
          Class == "Normal" ~ Scoring + `Adj Rank`,
          TRUE ~ Scoring 
        )
      ) %>% 
      arrange(`Ranking Stock`)
    
    out <- temp_out %>% 
      filter(Fields == field, Growth == type) %>% 
      select(Ticker, !! grouping, Fields, Growth, `Ranking Grouping`, `Ranking Stock`)
    
    out
  
}

#* Stock Ratio
#* @param ticker
#* @param startdate
#* @param enddate
#* @json
#* @post /stock-ratio
function(ticker, startdate, enddate){
  
Ticker_name <- ticker
start_date <- startdate
end_date <- enddate
  
con <- dbConnect(MariaDB(), 
                   user = "jarvisalgoritma",
                   password = "Jarvis@2020",
                   dbname = "jarvis-algoritma",
                   host = "api.jarvisasset.com")
  
db <- con
  
  cat(paste("Ticker :", Ticker_name,"\n"))
  
  range_year <- (str_extract(start_date, pattern = "[0-9]+") %>% as.numeric()):(str_extract(end_date, pattern = "[0-9]+") %>% as.numeric())
  
  formula_table <- tbl(db,"lv2_formula_ratio") %>% 
    collect()
  
  stock_data <- formula_table %>% 
    filter(Data == "Stocks")
  
  tbl_nest <- stock_data %>% 
    nest( -ID_Unique )
  
  list_output <- furrr::future_map(tbl_nest$data, .f = calculate_stocks, 
                                   # Argument for function collect stock data
                                   db = db, Ticker_name = Ticker_name, start_date = start_date, end_date = end_date)
  
  list_output <- bind_rows(list_output) %>% 
    distinct() %>% 
    mutate(
      Ticker = Ticker_name,
      Date = case_when(
        Period == "Annual" ~ paste0(year, "-12-31"),
        Period == "Quarter" & quarter == 1 ~ paste0(year, "-3-31"),
        Period == "Quarter" & quarter == 2 ~ paste0(year, "-6-30"),
        Period == "Quarter" & quarter == 3 ~ paste0(year, "-9-30"),
        Period == "Quarter" & quarter == 4 ~ paste0(year, "-12-31")
      )) %>%
    select(Period, Ticker, Date, Fields, Value)
  
  return(list_output)
}




